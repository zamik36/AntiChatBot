# telegram_bot.py
import redis
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Redis
from redis.exceptions import ConnectionError, TimeoutError, RedisError
import telegram
# –ò—Å–ø–æ–ª—å–∑—É–µ–º Application –∏ ApplicationBuilder –≤–º–µ—Å—Ç–æ Updater
from telegram.ext import Application, MessageHandler, filters, CommandHandler
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã –æ—à–∏–±–æ–∫
from telegram.error import Forbidden, BadRequest
import base64
import io
import os
import threading
import time
from dotenv import load_dotenv
import traceback

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ ---
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --- (–ë–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YOUR_USER_ID_STR = os.getenv("TELEGRAM_USER_ID")
REDIS_HOST = os.getenv("REDIS_HOST", 'localhost') # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é localhost
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))   # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 6379

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
if not TELEGRAM_TOKEN:
    print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ TELEGRAM_BOT_TOKEN=–í–ê–®_–¢–û–ö–ï–ù")
    exit()
if not YOUR_USER_ID_STR:
    print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ TELEGRAM_USER_ID=–í–ê–®_ID")
    exit()
try:
    YOUR_USER_ID = int(YOUR_USER_ID_STR)
except ValueError:
    print(f"–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_USER_ID ('{YOUR_USER_ID_STR}'). –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
    exit()

# --- –ö–∞–Ω–∞–ª—ã Redis --- (–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏)
CAPTCHA_REQUEST_CHANNEL = "antichatbot:captcha_request"
CAPTCHA_SOLUTION_CHANNEL = "antichatbot:captcha_solution"
OPERATOR_NOTIFY_CHANNEL = "antichatbot:operator_notify"
HEARTBEAT_CHANNEL = "antichatbot:heartbeat" # –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis --- (–ò—Å–ø–æ–ª—å–∑—É–µ–º try-except –¥–ª—è Redis)
r = None
try:
    r = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)
    r.ping() # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    print(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –ø–æ –∞–¥—Ä–µ—Å—É {REDIS_HOST}:{REDIS_PORT}")
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
except (ConnectionError, TimeoutError, RedisError) as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis ({REDIS_HOST}:{REDIS_PORT}): {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
    exit()
except Exception as e:
    print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Redis: {e}")
    exit()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± v20+) ---
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application
application = Application.builder().token(TELEGRAM_TOKEN).build()
# –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã bot –∏ job_queue –∏–∑ application
# bot = application.bot # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å bot, –Ω–æ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç context.bot –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
# job_queue = application.job_queue # JobQueue –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–∞–∫

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏
waiting_for_captcha = False

# --- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –¥–ª—è v20+) --- 
# –î–æ–±–∞–≤–ª—è–µ–º async/await
async def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_chat.id
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id == YOUR_USER_ID:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        await context.bot.send_message(chat_id=user_id, text="ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ê–Ω—Ç–∏–ß–∞—Ç–ë–æ—Ç Telegram –ü–æ–º–æ—â–Ω–∏–∫. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–≤–æ–¥ –∫–∞–ø—á–∏.")
    else:
        await context.bot.send_message(chat_id=user_id, text="‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

# –î–æ–±–∞–≤–ª—è–µ–º async/await
async def handle_text(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–∞–ø—á—É)"""
    global waiting_for_captcha
    user_id = update.effective_chat.id

    if user_id != YOUR_USER_ID:
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    user_text = update.message.text
    print(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}")

    if waiting_for_captcha:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ '{user_text}' –≤ Redis...")
        try:
            r.publish(CAPTCHA_SOLUTION_CHANNEL, user_text)
            await context.bot.send_message(chat_id=user_id, text=f"‚úÖ –û—Ç–≤–µ—Ç '{user_text}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.")
            waiting_for_captcha = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Redis –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        except (ConnectionError, TimeoutError, RedisError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è –≤ Redis: {e}")
            await context.bot.send_message(chat_id=user_id, text=f"‚ùå –û—à–∏–±–∫–∞ Redis –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—à–µ–Ω–∏—è: {e}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
            # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ waiting_for_captcha, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        except Exception as e:
            print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è: {e}")
            await context.bot.send_message(chat_id=user_id, text=f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—à–µ–Ω–∏—è: {e}")
            waiting_for_captcha = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏
    else:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        # await context.bot.send_message(chat_id=user_id, text="–°–µ–π—á–∞—Å —è –Ω–µ –æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ –∫–∞–ø—á–∏.")

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ job_queue ---
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ job_queue, –∏–º –Ω—É–∂–µ–Ω context
async def send_operator_notification(context):
    job_data = context.job.data # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ job_queue
    chat_id = job_data['chat_id']
    site_name = job_data['site_name']
    try:
        await context.bot.send_message(chat_id=chat_id, text=f"üîî –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ: {site_name}")
    except Forbidden:
         print(f"–û—à–∏–±–∫–∞ Telegram (Forbidden): –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id} –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç.")
    except BadRequest as e:
         print(f"–û—à–∏–±–∫–∞ Telegram (BadRequest): –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –≤ Telegram: {e}")

async def send_captcha_request(context):
    job_data = context.job.data
    chat_id = job_data['chat_id']
    img_stream = job_data['image']
    caption = job_data['caption']
    try:
        await context.bot.send_photo(chat_id=chat_id, photo=img_stream, caption=caption)
    except Forbidden:
         print(f"–û—à–∏–±–∫–∞ Telegram (Forbidden): –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id} –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç.")
    except BadRequest as e:
         print(f"–û—à–∏–±–∫–∞ Telegram (BadRequest): –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫–∞–ø—á–∏ - {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∫–∞–ø—á–∏ –≤ Telegram: {e}")

async def send_generic_message(context):
    job_data = context.job.data
    chat_id = job_data['chat_id']
    text = job_data['text']
    try:
        await context.bot.send_message(chat_id=chat_id, text=text)
    except Forbidden:
        print(f"–û—à–∏–±–∫–∞ Telegram (Forbidden): –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id} –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç.")
    except BadRequest as e:
        print(f"–û—à–∏–±–∫–∞ Telegram (BadRequest): –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def redis_listener():
    """–°–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã Redis –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global waiting_for_captcha

    while True: # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –≤ —Å–ª—É—á–∞–µ –æ–±—Ä—ã–≤–∞
        pubsub = None
        try:
            pubsub = r.pubsub(ignore_subscribe_messages=True)
            pubsub.subscribe(OPERATOR_NOTIFY_CHANNEL, CAPTCHA_REQUEST_CHANNEL, HEARTBEAT_CHANNEL)
            print("Redis Listener: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

            for message in pubsub.listen():
                channel = message['channel']
                data = message['data']
                print(f"Redis Listener: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–Ω–∞–ª: {channel})") # –õ–æ–≥

                try:
                    if channel == OPERATOR_NOTIFY_CHANNEL:
                        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {YOUR_USER_ID}")
                        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context —á–µ—Ä–µ–∑ data={...}
                        application.job_queue.run_once(send_operator_notification, 0,
                                                   data={'chat_id': YOUR_USER_ID, 'site_name': data},
                                                   name=f"op_notify_{time.time()}") # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è job
                        waiting_for_captcha = False

                    elif channel == CAPTCHA_REQUEST_CHANNEL:
                        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞–ø—á—É. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {YOUR_USER_ID}")
                        waiting_for_captcha = True
                        try:
                            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'data:image/png;base64,' –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                            if data.startswith('data:image'):
                                img_data_b64 = data.split(',', 1)[1]
                            else:
                                img_data_b64 = data # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —É–∂–µ —á–∏—Å—Ç—ã–π base64

                            img_bytes = base64.b64decode(img_data_b64)
                            img_file = io.BytesIO(img_bytes)
                            img_file.name = 'captcha.png' # –ò–º—è —Ñ–∞–π–ª–∞ –≤–∞–∂–Ω–æ –¥–ª—è Telegram
                            img_file.seek(0)

                            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ
                            application.job_queue.run_once(send_captcha_request, 0,
                                                       data={'chat_id': YOUR_USER_ID,
                                                             'image': img_file,
                                                             'caption': "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:"},
                                                       name=f"captcha_{time.time()}")

                        except (base64.binascii.Error, ValueError) as decode_error:
                            print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64 –∫–∞–ø—á–∏: {decode_error}")
                            application.job_queue.run_once(send_generic_message, 0,
                                                       data={'chat_id': YOUR_USER_ID,
                                                             'text': f"‚ùå –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ø—á–∏."}, 
                                                       name=f"error_{time.time()}")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏/–æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ø—á–∏: {e}")
                            application.job_queue.run_once(send_generic_message, 0,
                                                        data={'chat_id': YOUR_USER_ID,
                                                              'text': f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–∞–ø—á—É: {e}"},
                                                        name=f"error_{time.time()}")

                    elif channel == HEARTBEAT_CHANNEL:
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ heartbeat, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        pass # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis (–∫–∞–Ω–∞–ª: {channel}): {e}")

        # –£—Ç–æ—á–Ω—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        except (ConnectionError, TimeoutError, RedisError) as e:
            print(f"Redis Listener: –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis ({e}). –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            if pubsub: 
                try: pubsub.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥ –ø–∞—É–∑–æ–π
                except Exception as close_e: print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ pubsub: {close_e}")
            pubsub = None
            time.sleep(10)
        except Exception as e:
            print(f"Redis Listener: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ({e}). –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è.")
            traceback.print_exc()
            break # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ while True
        finally:
             if pubsub:
                 try:
                     pubsub.unsubscribe()
                     pubsub.close()
                     print("Redis Listener: –ü–æ–¥–ø–∏—Å–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
                 except Exception as close_e:
                     print(f"Redis Listener: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {close_e}")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram (—á–µ—Ä–µ–∑ application) ---
# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
authorized_user_filter = filters.Chat(chat_id=YOUR_USER_ID)

application.add_handler(CommandHandler('start', start, filters=authorized_user_filter))
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND) & authorized_user_filter, handle_text))
# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
application.add_handler(CommandHandler('start', start, filters=~authorized_user_filter))

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è --- 
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è Redis –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    print("–ó–∞–ø—É—Å–∫ Redis Listener –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
    redis_thread = threading.Thread(target=redis_listener, daemon=True)
    redis_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ Telegram —á–µ—Ä–µ–∑ Application
    print("–ó–∞–ø—É—Å–∫ Telegram Bot Polling...")
    # run_polling –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ctrl+C)
    application.run_polling()
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    main() 