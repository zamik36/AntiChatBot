import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import json
import threading
import redis
from redis.exceptions import ConnectionError, TimeoutError, RedisError
import os
from dotenv import load_dotenv
import time
import traceback
import uuid

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Redis) ---
load_dotenv()
REDIS_HOST = os.getenv("REDIS_HOST", 'localhost')
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
CONFIG_FILE = 'config.json'

# --- –ö–∞–Ω–∞–ª—ã Redis --- (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Å chat_logic –∏ chat_service)
SESSION_START_REQUEST_CHANNEL = "antichatbot:session_start_request"
SESSION_STATUS_CHANNEL_TEMPLATE = "antichatbot:session_status:{session_id}"
USER_READY_CHANNEL_TEMPLATE = "antichatbot:user_ready:{session_id}"
SESSION_CLOSE_REQUEST_TEMPLATE = "antichatbot:session_close_request:{session_id}"


class ChatBotApp:
    # –£–±–∏—Ä–∞–µ–º config_redis –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º .env
    def __init__(self, root, config_sites):
        self.root = root
        self.config_sites = config_sites # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–π—Ç–æ–≤
        self.sites = list(config_sites.keys()) if config_sites else []

        # –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –∏ Redis
        self.current_session_id = None
        self.redis_client = None
        self.redis_pubsub = None
        self.redis_listener_thread = None
        self.is_listening_redis = False
        self.stop_redis_listener_flag = threading.Event() # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª—è
        self.last_displayed_status = None # <-- –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞

        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI --- (–æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Ö–æ–∂–µ–π)
        self.root.title("–ê–Ω—Ç–∏–ß–∞—Ç–ë–æ—Ç - –ö–ª–∏–µ–Ω—Ç")
        self.root.geometry("600x500")
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

        control_frame = tk.Frame(root)
        control_frame.pack(pady=10, padx=10, fill=tk.X)

        tk.Label(control_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç:").pack(side=tk.LEFT, padx=(0, 5))
        self.site_combobox = ttk.Combobox(control_frame, values=self.sites, state="readonly", width=40)
        if self.sites:
            self.site_combobox.current(0)
        else:
            self.site_combobox['values'] = ["–ù–µ—Ç —Å–∞–π—Ç–æ–≤ –≤ config.json!"]
            self.site_combobox.current(0)
            self.site_combobox.config(state=tk.DISABLED)
        self.site_combobox.pack(side=tk.LEFT, expand=True, fill=tk.X)

        button_frame = tk.Frame(root)
        button_frame.pack(pady=5, padx=10)

        # –ú–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"
        self.start_button = tk.Button(button_frame, text="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥", command=self.request_session_start, width=25, height=2, state=tk.DISABLED) # –ù–∞—á–Ω–µ–º —Å DISABLED
        self.start_button.pack(side=tk.LEFT, padx=5)

        # –ú–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        self.continue_button = tk.Button(button_frame, text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–ø–æ—Å–ª–µ —Ñ–æ—Ä–º—ã)", command=self.signal_user_ready, width=25, state=tk.DISABLED)
        self.continue_button.pack(side=tk.LEFT, padx=5)

        status_frame = tk.LabelFrame(root, text="–°—Ç–∞—Ç—É—Å –∏ –õ–æ–≥–∏ –°–µ—Å—Å–∏–∏", padx=5, pady=5)
        status_frame.pack(pady=10, padx=10, expand=True, fill=tk.BOTH)

        self.status_text = scrolledtext.ScrolledText(status_frame, wrap=tk.WORD, height=15, state='disabled')
        self.status_text.pack(expand=True, fill=tk.BOTH)

        # --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∏ –∑–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è --- #
        self.connect_redis_and_start_listener()

    def update_status_display(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ GUI."""
        # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ --- #
        if message == self.last_displayed_status:
            return # –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
        self.last_displayed_status = message # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò --- #

        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ root.after
        # –¢–µ–ø–µ—Ä—å –Ω–∞–ø—Ä—è–º—É—é –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç, —Ç.–∫. –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if message == "WAITING_FOR_FORM_INPUT":
            display_message = (
                "=============================================================\n"
                "ACTION REQUIRED / –¢–†–ï–ë–£–ï–¢–°–Ø –î–ï–ô–°–¢–í–ò–ï:\n"
                "=============================================================\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ (–æ—Ç–∫—Ä—ã—Ç–æ–µ ChatService).\n"
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º–µ —á–∞—Ç–∞ "
                "(–∏–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω, —Å–æ–≥–ª–∞—Å–∏–µ –∏ —Ç.–ø.).\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ –ù–ê –°–ê–ô–¢–ï (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–∞—á–∞—Ç—å —á–∞—Ç', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å').\n\n"
                ">>> –ü–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \n"
                "    '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–ø–æ—Å–ª–µ —Ñ–æ—Ä–º—ã)' –ó–î–ï–°–¨, –≤ —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. <<<\n"
                "============================================================="
            )
            self.status_text.configure(state='normal')
            self.status_text.insert(tk.END, display_message + "\n\n")
            self.status_text.configure(state='disabled')
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            self.continue_button.config(state=tk.NORMAL)
            self.start_button.config(state=tk.DISABLED) # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –Ω–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        elif message.startswith("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø") or message.startswith("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ") or message.startswith("‚úÖ –£–°–ü–ï–•"):
             # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–ª–∏ —É—Å–ø–µ—Ö–µ
             self.status_text.configure(state='normal')
             self.status_text.insert(tk.END, f"\n--- {message} ---\n\n")
             self.status_text.configure(state='disabled')
             if message.startswith("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø"):
                  messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏", message)
             elif message.startswith("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"):
                  messagebox.showinfo("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", message)
             self.reset_ui_after_session() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            self.status_text.configure(state='normal')
            self.status_text.insert(tk.END, message + "\n")
            self.status_text.configure(state='disabled')

        self.status_text.see(tk.END)

    def connect_redis_and_start_listener(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞."""
        try:
            self.status_text.configure(state='normal')
            self.status_text.insert(tk.END, f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis ({REDIS_HOST}:{REDIS_PORT})...\n")
            self.status_text.configure(state='disabled')
            self.redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)
            self.redis_client.ping()
            self.status_text.configure(state='normal')
            self.status_text.insert(tk.END, "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis!\n")
            self.status_text.configure(state='disabled')
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞, –µ—Å–ª–∏ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –µ—Å—Ç—å —Å–∞–π—Ç—ã
            if self.sites:
                self.start_button.config(state=tk.NORMAL)
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
            if not self.is_listening_redis:
                 self.stop_redis_listener_flag.clear()
                 self.redis_listener_thread = threading.Thread(target=self.redis_status_listener, daemon=True)
                 self.redis_listener_thread.start()
                 self.is_listening_redis = True
        except (ConnectionError, TimeoutError, RedisError) as e:
             error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}\n–°–µ—Ä–≤–∏—Å —á–∞—Ç–∞ –∏ –±–æ—Ç –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ Redis —Å–µ—Ä–≤–µ—Ä.\n"
             self.status_text.configure(state='normal')
             self.status_text.insert(tk.END, error_msg)
             self.status_text.configure(state='disabled')
             messagebox.showerror("–û—à–∏–±–∫–∞ Redis", error_msg)
             self.start_button.config(state=tk.DISABLED)
        except Exception as e:
             error_msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Redis: {e}\n"
             self.status_text.configure(state='normal')
             self.status_text.insert(tk.END, error_msg)
             self.status_text.configure(state='disabled')
             messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
             self.start_button.config(state=tk.DISABLED)

    def redis_status_listener(self):
        """–°–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –¢–ï–ö–£–©–ï–ô —Å–µ—Å—Å–∏–∏ –≤ Redis."""
        listener_instance_id = str(uuid.uuid4())[:4] # Unique ID for this listener instance/thread for logging
        print(f"[GUI] –ü–æ—Ç–æ–∫ —Å–ª—É—à–∞—Ç–µ–ª—è Redis ({listener_instance_id}) –∑–∞–ø—É—â–µ–Ω.")

        while not self.stop_redis_listener_flag.is_set():
            # --- –õ–û–ì: –ù–∞—á–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ ---
            time.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è 100% CPU

            if self.current_session_id and self.redis_client:
                status_channel = SESSION_STATUS_CHANNEL_TEMPLATE.format(session_id=self.current_session_id)
                # --- –õ–û–ì: –ü—Ä–æ–≤–µ—Ä–∫–∞ pubsub –∏ –ø–æ–¥–ø–∏—Å–∫–∞ ---
                if not self.redis_pubsub:
                    try:
                        self.redis_pubsub = self.redis_client.pubsub(ignore_subscribe_messages=True)
                        # --- –õ–û–ì: –ü–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π ---
                        self.redis_pubsub.subscribe(status_channel)
                        # --- –õ–û–ì: –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ---
                        print(f"[GUI] –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: {status_channel}")
                        # –î–æ–±–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GUI –æ –ø–æ–¥–ø–∏—Å–∫–µ
                        self.root.after(0, self.update_status_display, f"[INFO] –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ {self.current_session_id}...")
                    except (ConnectionError, TimeoutError, RedisError, AttributeError) as e:
                        print(f"[GUI_LISTENER_THREAD {listener_instance_id}] ERROR during subscribe: {e}")
                        self.redis_pubsub = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                        time.sleep(2)
                        continue # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞
                    except Exception as e:
                         print(f"[GUI_LISTENER_THREAD {listener_instance_id}] UNEXPECTED ERROR during subscribe: {e}")
                         traceback.print_exc()
                         self.redis_pubsub = None
                         time.sleep(5)
                         continue

                # –ï—Å–ª–∏ –µ—Å—Ç—å pubsub, —Å–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                if self.redis_pubsub:
                    try:
                        message = self.redis_pubsub.get_message(timeout=1.0)

                        if message and message['type'] == 'message':
                            status_update = message['data']
                            # --- –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –õ–û–ì ---
                            self.root.after(0, self.update_status_display, status_update)
                        # else: # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ None –∏–ª–∏ –Ω–µ 'message'
                        #     if message: print(f"[GUI_LISTENER_THREAD {listener_instance_id}] Ignored message (type: {message.get('type')})")
                        #     # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª

                    except TimeoutError:
                        continue # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                    except (ConnectionError, RedisError, AttributeError) as e:
                        # --- –õ–û–ì: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ---
                        print(f"[GUI] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Redis –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                        if self.redis_pubsub:
                            try: self.redis_pubsub.unsubscribe()
                            except Exception: pass
                            try: self.redis_pubsub.close()
                            except Exception: pass
                        self.redis_pubsub = None
                        time.sleep(2)
                    except Exception as e:
                         # --- –õ–û–ì: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ---
                         print(f"[GUI] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                         traceback.print_exc()
                         if self.redis_pubsub:
                             try: self.redis_pubsub.unsubscribe()
                             except Exception: pass
                             try: self.redis_pubsub.close()
                             except Exception: pass
                         self.redis_pubsub = None
                         time.sleep(5)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ Redis, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
                time.sleep(1)

        print(f"[GUI] –ü–æ—Ç–æ–∫ —Å–ª—É—à–∞—Ç–µ–ª—è Redis ({listener_instance_id}) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        self.is_listening_redis = False

    def request_session_start(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ Redis."""
        if not self.redis_client:
            messagebox.showerror("–û—à–∏–±–∫–∞ Redis", "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis. –ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é.")
            self.connect_redis_and_start_listener() # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            return

        selected_site = self.site_combobox.get()
        if not selected_site or selected_site == "–ù–µ—Ç —Å–∞–π—Ç–æ–≤ –≤ config.json!":
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–∞–π—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞.")
            return

        # –ë–ª–æ–∫–∏—Ä—É–µ–º UI –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
        self.start_button.config(state=tk.DISABLED, text="–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
        self.continue_button.config(state=tk.DISABLED)
        self.site_combobox.config(state=tk.DISABLED)
        self.status_text.configure(state='normal')
        self.status_text.delete('1.0', tk.END)
        self.status_text.insert(tk.END, f"--- –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–∞–π—Ç–∞: {selected_site} ---\n")
        self.status_text.configure(state='disabled')

        try:
            self.current_session_id = str(uuid.uuid4())
            request_data = json.dumps({"site_name": selected_site, "session_id": self.current_session_id})

            # --- –õ–û–ì: –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ GUI --- #
            published_count = self.redis_client.publish(SESSION_START_REQUEST_CHANNEL, request_data)

            if published_count > 0:
                self.status_text.configure(state='normal')
                self.status_text.insert(tk.END, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Å—Å–∏—é {self.current_session_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...\n")
                self.status_text.configure(state='disabled')
                # –¢–µ–ø–µ—Ä—å —Å–ª—É—à–∞—Ç–µ–ª—å redis_status_listener –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å self.current_session_id
                # –ù—É–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –µ—Å–ª–∏ —É–∂–µ —Å–ª—É—à–∞–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
                if self.redis_pubsub:
                     try: self.redis_pubsub.unsubscribe()
                     except Exception: pass
                     try: self.redis_pubsub.close()
                     except Exception: pass
                     self.redis_pubsub = None # –°–±—Ä–æ—Å –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ü–∏–∫–ª–µ —Å–ª—É—à–∞—Ç–µ–ª—è
            else:
                 # –ï—Å–ª–∏ 0, –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (ChatService –Ω–µ –∑–∞–ø—É—â–µ–Ω?)
                 error_msg = "–û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ä—Ç —Å–µ—Å—Å–∏–∏ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º. –ó–∞–ø—É—â–µ–Ω –ª–∏ ChatService?"
                 messagebox.showerror("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", error_msg)
                 self.status_text.configure(state='normal')
                 self.status_text.insert(tk.END, error_msg + "\n")
                 self.status_text.configure(state='disabled')
                 self.reset_ui_after_session() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º UI

        except (ConnectionError, TimeoutError, RedisError) as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ Redis", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ä—Ç —Å–µ—Å—Å–∏–∏: {e}")
            self.reset_ui_after_session()
        except Exception as e:
             messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Å—Å–∏–∏: {e}")
             traceback.print_exc()
             self.reset_ui_after_session()

    def signal_user_ready(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏."""
        if not self.redis_client:
            messagebox.showerror("–û—à–∏–±–∫–∞ Redis", "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis. –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª.")
            return
        if not self.current_session_id:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞.")
            return

        self.continue_button.config(state=tk.DISABLED)
        user_ready_channel = USER_READY_CHANNEL_TEMPLATE.format(session_id=self.current_session_id)
        try:
            print(f"[GUI] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {self.current_session_id}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ '1' –∫–∞–∫ —Å–∏–≥–Ω–∞–ª
            published_count = self.redis_client.publish(user_ready_channel, "1")
            if published_count > 0:
                 self.update_status_display(f">>> –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {self.current_session_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except (ConnectionError, TimeoutError, RedisError) as e:
             messagebox.showerror("–û—à–∏–±–∫–∞ Redis", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
             # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É?
             self.continue_button.config(state=tk.NORMAL) # –î–∞–µ–º —à–∞–Ω—Å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        except Exception as e:
             messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
             traceback.print_exc()
             self.continue_button.config(state=tk.NORMAL)

    def reset_ui_after_session(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–±–æ–±–æ–∫—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è/–æ—à–∏–±–∫–∏ —Å–µ—Å—Å–∏–∏."""
        print("[GUI] –°–±—Ä–æ—Å UI –ø–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏.")
        self.start_button.config(state=tk.NORMAL if self.redis_client and self.sites else tk.DISABLED, text="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")
        self.continue_button.config(state=tk.DISABLED)
        if self.sites:
             self.site_combobox.config(state="readonly")
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å—Ç–∞—Ç—É—Å–∞
        if self.redis_pubsub:
            try: self.redis_pubsub.unsubscribe()
            except Exception: pass
            try: self.redis_pubsub.close()
            except Exception: pass
        self.redis_pubsub = None
        self.current_session_id = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞."""
        print("–û–∫–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è...")
        
        # --- –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ --- 
        if self.current_session_id and self.redis_client:
            close_channel = SESSION_CLOSE_REQUEST_TEMPLATE.format(session_id=self.current_session_id)
            try:
                print(f"[GUI] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ {self.current_session_id}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ 'close' –∫–∞–∫ —Å–∏–≥–Ω–∞–ª
                self.redis_client.publish(close_channel, "close")
                # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                time.sleep(0.5) 
            except (ConnectionError, TimeoutError, RedisError) as e:
                print(f"[GUI] –û—à–∏–±–∫–∞ Redis –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            except Exception as e:
                print(f"[GUI] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
        # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø --- 

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å Redis
        self.stop_redis_listener_flag.set()
        if self.redis_listener_thread and self.redis_listener_thread.is_alive():
             print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è Redis...")
             self.redis_listener_thread.join(timeout=1.0) # –£–º–µ–Ω—å—à–∏–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Redis, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if self.redis_pubsub:
            try: self.redis_pubsub.unsubscribe()
            except Exception as e: print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ Redis –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
            try: self.redis_pubsub.close()
            except Exception as e: print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è pubsub Redis –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
        if self.redis_client:
            try: self.redis_client.close()
            except Exception as e: print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Redis –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ.")

        self.root.destroy()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –û–ë–†–ê–ë–û–¢–ö–ê –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–æ–≤ --- #
def load_site_config(filename=CONFIG_FILE):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON, –ø—Ä–∏–º–µ–Ω—è–µ—Ç _defaults –∫ —Å–∞–π—Ç–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–∞–π—Ç–æ–≤."""
    full_config = None
    processed_sites_config = {}

    try:
        with open(filename, 'r', encoding='utf-8') as f:
            full_config = json.load(f)
    except FileNotFoundError:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except json.JSONDecodeError as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ {filename}: {e}")
        return None
    except Exception as e:
         messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
         return None

    # --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ _defaults (–∏–∑ main.py) --- #
    defaults = full_config.get('_defaults', {})
    sites_config_raw = full_config.get('sites', {})

    if not sites_config_raw: # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–µ–∫—Ü–∏—è sites
        print("–í —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª 'sites' –∏–ª–∏ –æ–Ω –ø—É—Å—Ç.")
        messagebox.showwarning("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "–í —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª 'sites' –∏–ª–∏ –æ–Ω –ø—É—Å—Ç.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã GUI –º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è, –Ω–æ –±–µ–∑ —Å–∞–π—Ç–æ–≤
        return {}

    for site_name, site_specific_config in sites_config_raw.items():
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–ø–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_site_config = {}
        for key, value in defaults.items():
            if isinstance(value, dict): # –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞—Ä–µ–π (emulation_options, selectors)
                current_site_config[key] = value.copy()
            else:
                current_site_config[key] = value

        # –û–±–Ω–æ–≤–ª—è–µ–º/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞
        for key, value in site_specific_config.items():
            if isinstance(value, dict) and isinstance(current_site_config.get(key), dict):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
                current_site_config[key].update(value)
            else:
                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
                current_site_config[key] = value
        processed_sites_config[site_name] = current_site_config
    # --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ _defaults --- #

    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–π—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–∑ {filename}")
    return processed_sites_config # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–û–õ–¨–ö–û –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–∞–π—Ç–æ–≤

# --- –ì–ª–∞–≤–Ω–∞—è —á–∞—Å—Ç—å --- #
if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —Å–∞–π—Ç–æ–≤
    config_sites_data = load_site_config()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ —Å–ª–æ–≤–∞—Ä—å (–¥–∞–∂–µ –ø—É—Å—Ç–æ–π - —ç—Ç–æ —É—Å–ø–µ—Ö –∑–∞–≥—Ä—É–∑–∫–∏)
    if config_sites_data is not None:
        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        root = tk.Tk()
        app = ChatBotApp(root, config_sites_data) # <-- –ü–µ—Ä–µ–¥–∞–µ–º config_sites_data
        root.mainloop()
    else:
        # –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ load_site_config
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∞–π—Ç–æ–≤ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞). –ó–∞–ø—É—Å–∫ GUI –æ—Ç–º–µ–Ω–µ–Ω.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å messagebox –∏ –∑–¥–µ—Å—å, –Ω–æ –æ–Ω —É–∂–µ –±—ã–ª –≤ load_site_config